{"version":3,"sources":["Main/Title/Titlebox.jsx","Main/Countbox/Countbox.jsx","Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Titlebox","className","React","Component","Countbox","props","state","num","count1","count2","count3","count4","count5","result","addSumNum","bind","sumImg","this","stateVariable","e","setState","Number","target","value","onChange","handleChange","type","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAGaA,G,YAAb,iLAEI,OACE,yBAAKC,UAAU,YAAf,6BAHN,GAA8BC,IAAMC,Y,cCAvBC,G,MAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,IAAK,GACLC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,IAEV,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAXA,EADrB,yEAgBI,IAAIC,EAASC,KAAKX,MAAMC,IACpBE,EAASQ,KAAKX,MAAMG,OACpBC,EAASO,KAAKX,MAAMI,OACpBC,EAASM,KAAKX,MAAMK,OACpBC,EAASK,KAAKX,MAAMM,OAGxB,OADAI,GAAmBP,EAASC,EAASC,EAASC,IACpB,EAATH,EAAsB,EAATC,EAAsB,EAATC,EAAsB,EAATC,KAvB5D,mCA0BeM,EAAeC,GAC1BF,KAAKG,SAAL,eACGF,EAAgBG,OAAOF,EAAEG,OAAOC,WA5BvC,+BAgCY,IAAD,OACP,OACE,6BACE,yBAAKtB,UAAU,SAAf,YAEE,2BAAOuB,SAAU,SAACL,GAAD,OAAO,EAAKM,aAAa,MAAON,IAAII,MAAON,KAAKX,MAAMC,IAAKN,UAAU,UAAUyB,KAAK,YAEvG,yBAAKzB,UAAU,SAAf,UAEE,2BAAOuB,SAAU,SAACL,GAAD,OAAO,EAAKM,aAAa,SAAUN,IAAII,MAAON,KAAKX,MAAMG,OAAQR,UAAU,UAAUyB,KAAK,YAE7G,yBAAKzB,UAAU,SAAf,UAEE,2BAAOuB,SAAU,SAACL,GAAD,OAAO,EAAKM,aAAa,SAAUN,IAAII,MAAON,KAAKX,MAAMI,OAAQT,UAAU,UAAUyB,KAAK,YAE7G,yBAAKzB,UAAU,SAAf,UAEE,2BAAOuB,SAAU,SAACL,GAAD,OAAO,EAAKM,aAAa,SAAUN,IAAII,MAAON,KAAKX,MAAMK,OAAQV,UAAU,UAAUyB,KAAK,YAE7G,yBAAKzB,UAAU,SAAf,UAEE,2BAAOuB,SAAU,SAACL,GAAD,OAAO,EAAKM,aAAa,SAAUN,IAAII,MAAON,KAAKX,MAAMM,OAAQX,UAAU,UAAUyB,KAAK,YAEjH,2CAAiBT,KAAKH,kBAvD1B,GAA8BZ,IAAMC,YCEvBwB,EAAb,iLAEI,OACE,yBAAK1B,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,WALR,GAA0BC,IAAMC,W,MCOjByB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.682aaacd.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css';\n\nexport class Titlebox extends React.Component {\n  render() {\n    return(\n      <div className='titlebox'>\n        Plate Process Counter\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport \"./Countbox.css\";\n\nexport class Countbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      num: '',\n      count1: '',\n      count2: '',\n      count3: '',\n      count4: '',\n      count5: '',\n      result: ''\n    };\n    this.addSumNum = this.addSumNum.bind(this);\n  }\n\n  addSumNum() {\n    let sumImg = this.state.num;\n    let count2 = this.state.count2;\n    let count3 = this.state.count3;\n    let count4 = this.state.count4;\n    let count5 = this.state.count5;\n\n    sumImg = sumImg - (count2 + count3 + count4 + count5)\n    return sumImg + (count2 * 2 + count3 * 3 + count4 * 4 + count5 * 5)\n  }\n\n  handleChange(stateVariable, e) {\n    this.setState({\n      [stateVariable]: Number(e.target.value)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"title\">\n          Sum image\n          <input onChange={(e) => this.handleChange('num', e)} value={this.state.num} className=\"counter\" type=\"number\" />\n        </div>\n        <div className=\"title\">\n          2 plate\n          <input onChange={(e) => this.handleChange('count2', e)} value={this.state.count2} className=\"counter\" type=\"number\" />\n        </div>\n        <div className=\"title\">\n          3 plate\n          <input onChange={(e) => this.handleChange('count3', e)} value={this.state.count3} className=\"counter\" type=\"number\" />\n        </div>\n        <div className=\"title\">\n          4 plate\n          <input onChange={(e) => this.handleChange('count4', e)} value={this.state.count4} className=\"counter\" type=\"number\" />\n        </div>\n        <div className=\"title\">\n          5 plate\n          <input onChange={(e) => this.handleChange('count5', e)} value={this.state.count5} className=\"counter\" type=\"number\" />\n        </div>\n    <div>Sum plate: {this.addSumNum()}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Main.css';\nimport { Titlebox } from './Title/Titlebox';\nimport { Countbox } from './Countbox/Countbox';\n\nexport class Main extends React.Component {\n  render() {\n    return(\n      <div className='main-table'>\n        <Titlebox />\n        <Countbox />\n      </div>\n\n    )\n  }\n}","import React from 'react';\nimport { Main } from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}